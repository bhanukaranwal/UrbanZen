name: UrbanZen CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, device-mgmt, data-ingestion, analytics, notification, user-mgmt, billing, reporting]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      if: matrix.service != 'analytics'
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Set up Python
      if: matrix.service == 'analytics'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache Go modules
      if: matrix.service != 'analytics'
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Cache Python dependencies
      if: matrix.service == 'analytics'
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Go dependencies
      if: matrix.service != 'analytics'
      run: |
        cd services/${{ matrix.service }}
        go mod download
    
    - name: Install Python dependencies
      if: matrix.service == 'analytics'
      run: |
        cd services/${{ matrix.service }}
        pip install -r requirements.txt
    
    - name: Run Go tests
      if: matrix.service != 'analytics'
      run: |
        cd services/${{ matrix.service }}
        go test -v ./...
    
    - name: Run Python tests
      if: matrix.service == 'analytics'
      run: |
        cd services/${{ matrix.service }}
        python -m pytest tests/ -v
    
    - name: Run Go linter
      if: matrix.service != 'analytics'
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: services/${{ matrix.service }}
    
    - name: Run Python linter
      if: matrix.service == 'analytics'
      run: |
        cd services/${{ matrix.service }}
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check .

  test-frontend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [admin-dashboard, public-dashboard]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/${{ matrix.app }}/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend/${{ matrix.app }}
        npm ci
    
    - name: Run tests
      run: |
        cd frontend/${{ matrix.app }}
        npm test -- --coverage --watchAll=false
    
    - name: Run linter
      run: |
        cd frontend/${{ matrix.app }}
        npm run lint
    
    - name: Build application
      run: |
        cd frontend/${{ matrix.app }}
        npm run build

  security-scan:
    runs-on: ubuntu-latest
    needs: [test, test-frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push:
    runs-on: ubuntu-latest
    needs: [test, test-frontend, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        service: [api-gateway, device-mgmt, data-ingestion, analytics, notification, user-mgmt, billing, reporting]
        include:
          - service: admin-dashboard
            context: frontend/admin-dashboard
          - service: public-dashboard
            context: frontend/public-dashboard
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.context || format('services/{0}', matrix.service) }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
    
    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        kubectl apply -f infrastructure/kubernetes/namespaces/staging.yaml
        kubectl apply -f infrastructure/kubernetes/services/ -n urbanzen-staging
        kubectl set image deployment/api-gateway api-gateway=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-gateway:develop-${{ github.sha }} -n urbanzen-staging

  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
    
    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig
        kubectl apply -f infrastructure/kubernetes/namespaces/production.yaml
        kubectl apply -f infrastructure/kubernetes/services/ -n urbanzen-prod
        kubectl set image deployment/api-gateway api-gateway=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-gateway:latest -n urbanzen-prod

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: 'UrbanZen deployment completed with status: ${{ job.status }}'